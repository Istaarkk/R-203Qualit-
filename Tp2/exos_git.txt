La fonction b(int a, float m) :
Cette fonction prend deux paramètres : a, qui représente l'âge de la personne, et m, qui représente le montant d'argent qu'elle possède.
Elle vérifie si l'âge a est supérieur ou égal à 18 ans (l'âge légal de consommation d'alcool en France) et si le montant m est supérieur ou égal à 7 (le prix moyen d'une bouteille de bière de 500 ml dans les restaurants à Paris).
Si ces conditions sont remplies, la fonction renvoie true, ce qui signifie que la personne peut acheter de la bière. Sinon, elle renvoie false.
int a :
Il s'agit d'une variable entière a représentant l'âge de la personne. Dans le contexte du code, elle est initialisée à 19, ce qui représente l'âge d'une personne.
float m :
Il s'agit d'une variable à virgule flottante m représentant le montant d'argent que la personne possède. Dans le contexte du code, elle est initialisée à 10.0, ce qui représente 10 euros.
18 et 7 :
Le nombre 18 correspond à l'âge légal de consommation d'alcool en France.
Le nombre 7 correspond au prix moyen d'une bouteille de bière de 500 ml dans les restaurants à Paris.

#include <iostream>
using namespace std;

bool b(int a, float m) {
    if (a >= 18 && m >= 7) {
        return true;
    }
    return false;
}

int main() {
    int a;
    float m;

    cout << "Enter your age: ";
    cin >> a;

    cout << "Enter the amount of money you have: ";
    cin >> m;

    if (b(a, m)) {
        cout << "You can buy beer!" << endl;
    } else {
        cout << "Sorry, you cannot buy beer." << endl;
    }
    return 0;
}

Question 4 : Après les transactions modifiées, le premier compte aura un solde de 50.0 et le deuxième compte aura un solde de 50.0.

Question 5 : Après les transactions modifiées, les deux comptes auront le même montant d'argent, soit 50.0.

Ce code a un sens, mais il y a une erreur de comptabilité. 
L'erreur vient du fait que les fonctions deposit1 et withdraw1 modifient la variable account_balance1, 
alors que les fonctions deposit2 et withdraw2 modifient la variable account_balance2. 
Cela signifie que les transactions pour le deuxième compte ne sont pas prises en compte correctement dans le calcul.

Questions 6 :
Le compte avec le plus d'argent est le deuxième compte.


Question 7 :
Renommage des membres de la classe :
balance devient mBalance pour respecter la convention des membres privés de classe.
float b dans le constructeur devient float initialBalance pour rendre son intention plus claire.
Renommage des méthodes :
ba_deposit devient deposit pour suivre la convention des noms de méthodes.
ba_withdraw devient withdraw pour la même raison.
ba_get devient getBalance pour indiquer clairement qu'il s'agit d'une méthode pour obtenir le solde.

#include <iostream>
using namespace std;

class BankAccount {
public:
    BankAccount(float initialBalance) : mBalance(initialBalance) {}

    void deposit(float amount) {
        mBalance += amount;
    }

    void withdraw(float amount) {
        if (amount <= mBalance) {
            mBalance -= amount;
        } else {
            cout << "Insufficient funds!" << endl;
        }
    }

    float getBalance() {
        return mBalance;
    }

private:
    float mBalance;
};

int main() {
    BankAccount firstAccount(0.0);
    BankAccount secondAccount(100.0);
    BankAccount thirdAccount(50.0); // Ajout du troisième compte
    firstAccount.deposit(100.0);
    firstAccount.withdraw(50.0);
    secondAccount.deposit(100.0);
    secondAccount.withdraw(50.0);
    thirdAccount.deposit(200.0); // Opération spécifique au troisième compte
    cout << "First Account Balance: " << firstAccount.getBalance() << endl;
    cout << "Second Account Balance: " << secondAccount.getBalance() << endl;
    cout << "Third Account Balance: " << thirdAccount.getBalance() << endl; // Affichage du solde du troisième compte
    return 0;
}

Questions 8 :
Le troisième compte a été initialisé avec un solde de 50.0, puis une opération de dépôt de 200.0 a été effectuée. Par conséquent, le montant total d'argent dans le troisième compte est de 250.0.


#include <iostream>
#include <string>

using namespace std;

class GrammaticallyCorrectMessage {
private:
    string number;
    string verb;
    string pluralModifier;

    void thereAreNoCandidates() {
        number = "no";
        verb = "are";
        pluralModifier = "s";
    }

    void thereIsOneCandidate() {
        number = "1";
        verb = "is";
        pluralModifier = "";
    }

    void thereAreMultipleCandidates(int count) {
        number = to_string(count);
        verb = "are";
        pluralModifier = "s";
    }

    void assignValuesToMessageParts(int count) {
        if (count == 0) {
            thereAreNoCandidates();
        } else if (count == 1) {
            thereIsOneCandidate();
        } else {
            thereAreMultipleCandidates(count);
        }
    }

public:
    string createMessage(string candidate, int count) {
        assignValuesToMessageParts(count);
        string message = "There " + verb + " " + number + " " + candidate + pluralModifier + ".";
        return message;
    }
};

int main() {
    GrammaticallyCorrectMessage message;
    cout << message.createMessage("bicycle", 0) << endl;
    cout << message.createMessage("house", 1) << endl;
    cout << message.createMessage("computer", 2) << endl;
    return 0;
}


Question 9 : La classe GrammaticallyCorrectMessage contient 3 attributs privés (number, verb, pluralModifier) et 1 méthode privée (assignValuesToMessageParts) ainsi qu'1 méthode publique (createMessage).

Question 10 : La méthode assignValuesToMessageParts ne retourne rien, donc son type de retour est void.
La méthode createMessage retourne un message sous forme de chaîne de caractères (string).